class Solution {
public:
    bool usingDFS(int src , map<int , list<int>> &adjList ,unordered_map<int , bool> &visited,unordered_map<int , bool> &dfsTrack){

            visited[src] = true;
            dfsTrack[src] = true;

            for(auto nbr : adjList[src]){
                if(visited[nbr] == false){
                   bool ans = usingDFS(nbr , adjList , visited , dfsTrack);

                   if(ans == true){
                      return true;
                   }
                }

                else if(visited[nbr] == true && dfsTrack[nbr] == true){
                    return true;
                }
            }

            dfsTrack[src] = false;

            return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        map<int , list<int>> adjList;

        for(auto pr : prerequisites){
            int u = pr[0];
            int v = pr[1];

            adjList[v].push_back(u);
        }
        
        unordered_map<int , bool> visited;
        unordered_map<int , bool> dfsTrack;

        for(int i = 0 ; i < numCourses ; i++){
            if(visited[i] == false){
                bool ans = usingDFS(i , adjList, visited , dfsTrack);

                if(ans == true){
                    return false;
                }
            }
        }

        return true;
    }
};
