class Solution {
public:
    void usingDFS(int i , int j , int row , int col , vector<vector<char>> &grid){
        if((i < 0 || i > row - 1) || (j < 0 || j > col - 1)){
            return;
        }
        
        if(grid[i][j] == '0'){
            return;
        }
        
        grid[i][j] = '0';

        //UP
        usingDFS(i - 1 , j , row , col , grid);

        //Down
        usingDFS(i + 1 , j , row , col , grid);

        //Right
        usingDFS(i , j + 1 , row , col , grid);

        //Left
        usingDFS(i , j - 1 , row , col , grid);

    }

    int numIslands(vector<vector<char>>& grid) {
        int count = 0;

        int row = grid.size();
        int col = grid[0].size();

        for(int i = 0 ; i < row ; i++){
            for(int j = 0 ; j < col ; j++){
                if(grid[i][j] == '1'){
                    count++;
                    usingDFS(i , j , row , col , grid);
                }
            }
        }

        return count;
    }
};
