class Solution {
public:
    bool usingDFS(int src , vector<int> &ans,  map<int , list<int>> &adjList , unordered_map<int , bool> &visited , unordered_map<int, bool> &dfsTrack){
       
        visited[src] = true;
        dfsTrack[src] = true;
       
        for(auto nbr : adjList[src]){
           if(visited[nbr] == false){
               if(usingDFS(nbr , ans , adjList , visited , dfsTrack)){
                 return true;
               }
           }

           else if(visited[nbr] == true && dfsTrack[nbr] == true){
              return true;
           }
        }
        
        dfsTrack[src] = false;
        ans.push_back(src);

        return false;
    }

    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> ans;
        
        map<int , list<int>> adjList;
        unordered_map<int , bool> visited;
        unordered_map<int, bool> dfsTrack;
        
       for(auto edge : prerequisites){
           int u = edge[0];
           int v = edge[1];
           
           adjList[v].push_back(u);
       }
        
       for(int i = 0 ; i < numCourses ; i++){
           if(visited[i] == false){
              if(usingDFS(i , ans , adjList , visited , dfsTrack)){
                return {};
              }
           }
       }
        
        reverse(ans.begin() , ans.end());

        return ans;
    }
};
